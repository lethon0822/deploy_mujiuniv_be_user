plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.green'
version = '0.0.1-SNAPSHOT'
description = 'muziuniv_be_user'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
   set('springCloudVersion', "2025.0.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // openFeign
    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    //jwt
    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'

    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'

    // https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // https://mvnrepository.com/artifact/io.hypersistence/hypersistence-utils-hibernate-63
    // 이거 뭔지 나중에 알아오겠음
    implementation 'io.hypersistence:hypersistence-utils-hibernate-63:3.10.3' //TSID
//
//    //유레카
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
//
    //  유효성 검사 의존성과 엑터
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation' //validation

    //스프링 시큐리티
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // google email certification
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.mindrot:jbcrypt:0.4'

    // jpa 의존성
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // redis
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter'
//    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // --- JDBC 로깅 (log4jdbc) ---
    implementation 'org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16'

    // --- Spring ---
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'   // ← 추가 (DTO @Valid 등)

    // --- MyBatis ---
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.4'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.4'

    // --- DB Driver (MariaDB 사용) ---
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    // 만약 MySQL로 바꿀 경우:
    // runtimeOnly 'com.mysql:mysql-connector-j'

    // --- Lombok ---
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // --- DevTools (선택) ---
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // --- Test ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}